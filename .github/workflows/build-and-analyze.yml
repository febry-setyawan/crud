# Nama alur kerja yang akan muncul di tab Actions
name: Build, Test, and Analyze
permissions:
  contents: read
  pull-requests: write

# Pemicu: Alur kerja ini akan berjalan setiap kali ada push ke branch 'master' atau 'main'
on:
  push:
    branches:
      - master

# Daftar pekerjaan yang akan dijalankan
jobs:
  build-and-sonaranalysis:
    # Nama pekerjaan
    name: Build, Test & SonarCloud Analysis
    # Menggunakan server Ubuntu terbaru yang disediakan GitHub
    runs-on: ubuntu-latest

    # Langkah-langkah yang akan dieksekusi
    steps:
      # 1. Mengunduh kode dari repository Anda
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Mengatur JDK versi 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Cache dependensi Maven untuk mempercepat build
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4. Build, jalankan tes (untuk generate JaCoCo report), dan kirim ke SonarCloud
      - name: Build, Test and Analyze with Maven
        env:
          # Menggunakan secret yang sudah kita simpan
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Diperlukan untuk pull request decoration
        run: >
          mvn -B clean verify sonar:sonar 
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.projectKey=febry-setyawan_crud
          -Dsonar.organization=${{ secrets.ORG_KEY }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # 5. Jalankan Spring Boot backend di background
      - name: Start Spring Boot backend
        run: mvn clean spring-boot:run &

      # 6. Tunggu backend siap di port 8080
      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            nc -z localhost 8080 && echo "Backend is up!" && exit 0
            sleep 2
          done
          echo "Backend did not start in time" && exit 1

      # 7. Install k6
      - name: Install k6
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg ca-certificates
          curl -s https://dl.k6.io/key.gpg | sudo apt-key add -
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6

      # 8. Jalankan k6 performance test di localhost
      - name: Run k6 performance test (localhost)
        run: |          
          k6 run script.js

      # 9. Jalankan k6 performance test di k6 Cloud (test ke localhost, hasil ke cloud)
      # Jika mau hasilnya ke k6 Cloud, copy baris di bawah ini
      # - name: Run k6 performance test (k6 Cloud)
      #   env:
      #     K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
      #   run: |
      #     k6 login cloud --token $K6_CLOUD_TOKEN          
      #     k6 cloud script.js
